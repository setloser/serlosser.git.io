<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[git_pro]]></title>
    <url>%2F2018%2F11%2F03%2Fgit-pro%2F</url>
    <content type="text"><![CDATA[Git基础语法命令git init # 初始化本地git仓库（创建新仓库） git config --global user.name &quot;xxx&quot; # 配置用户名 git config --global user.email &quot;xxx@xxx.com&quot; # 配置邮件 git config --global color.ui true # git status等命令自动着色 git config --global color.status auto git config --global color.diff auto git config --global color.branch auto git config --global color.interactive auto git config --global --unset http.proxy # remove proxy configuration on git git clone git+ssh://git@192.168.53.168/VT.git # clone远程仓库 git status # 查看当前版本状态（是否修改） git add xyz # 添加xyz文件至index git add . # 增加当前子目录下所有更改过的文件至index git commit -m &apos;xxx&apos; # 提交 git commit --amend -m &apos;xxx&apos; # 合并上一次提交（用于反复修改） git commit -am &apos;xxx&apos; # 将add和commit合为一步 git rm xxx # 删除index中的文件 git rm -r * # 递归删除 git log # 显示提交日志 git log -1 # 显示1行日志 -n为n行 git log -5 git log --stat # 显示提交日志及相关变动文件 git log -p -m git show dfb02e6e4f2f7b573337763e5c0013802e392818 # 显示某个提交的详细内容 git show dfb02 # 可只用commitid的前几位 git show HEAD # 显示HEAD提交日志 git show HEAD^ # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本 git tag # 显示已存在的tag git tag -a v2.0 -m &apos;xxx&apos; # 增加v2.0的tag git show v2.0 # 显示v2.0的日志及详细内容 git log v2.0 # 显示v2.0的日志 git diff # 显示所有未添加至index的变更 git diff --cached # 显示所有已添加index但还未commit的变更 git diff HEAD^ # 比较与上一个版本的差异 git diff HEAD -- ./lib # 比较与HEAD版本lib目录的差异 git diff origin/master..master # 比较远程分支master上有本地分支master上没有的 git diff origin/master..master --stat # 只显示差异的文件，不显示具体内容 git remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch） git branch # 显示本地分支 git branch --contains 50089 # 显示包含提交50089的分支 git branch -a # 显示所有分支 git branch -r # 显示所有原创分支 git branch --merged # 显示所有已合并到当前分支的分支 git branch --no-merged # 显示所有未合并到当前分支的分支 git branch -m master master_copy # 本地分支改名 git checkout -b master_copy # 从当前分支创建新分支master_copy并检出 git checkout -b master master_copy # 上面的完整版 git checkout features/performance # 检出已存在的features/performance分支 git checkout --track hotfixes/BJVEP933 # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支 git checkout v2.0 # 检出版本v2.0 git checkout -b devel origin/develop # 从远程分支develop创建新本地分支devel并检出 git checkout -- README # 检出head版本的README文件（可用于修改错误回退） git merge origin/master # 合并远程master分支至当前分支 git cherry-pick ff44785404a8e # 合并提交ff44785404a8e的修改 git push origin master # 将当前分支push到远程master分支 git push origin :hotfixes/BJVEP933 # 删除远程仓库的hotfixes/BJVEP933分支 git push --tags # 把所有tag推送到远程仓库 git fetch # 获取所有远程分支（不更新本地分支，另需merge） git fetch --prune # 获取所有原创分支并清除服务器上已删掉的分支 git pull origin master # 获取远程分支master并merge到当前分支 git mv README README2 # 重命名文件README为README2 git reset --hard HEAD # 将当前版本重置为HEAD（通常用于merge失败回退） git rebase git branch -d hotfixes/BJVEP933 # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支） git branch -D hotfixes/BJVEP933 # 强制删除分支hotfixes/BJVEP933 git ls-files # 列出git index包含的文件 git show-branch # 图示当前分支历史 git show-branch --all # 图示所有分支历史 git whatchanged # 显示提交历史对应的文件修改 git revert dfb02e6e4f2f7b573337763e5c0013802e392818 # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818 git ls-tree HEAD # 内部命令：显示某个git对象 git rev-parse v2.0 # 内部命令：显示某个ref对于的SHA1 HASH git reflog # 显示所有提交，包括孤立节点 git show HEAD@{5} git show master@{yesterday} # 显示master分支昨天的状态 git log --pretty=format:&apos;%h %s&apos; --graph # 图示提交日志 git show HEAD~3 git show -s --pretty=raw 2be7fcb476 git stash # 暂存当前修改，将所有至为HEAD状态 git stash list # 查看所有暂存 git stash show -p stash@{0} # 参考第一次暂存 git stash apply stash@{0} # 应用第一次暂存 git grep &quot;delete from&quot; # 文件中搜索文本“delete from” git grep -e &apos;#define&apos; --and -e SORT_DIRENT git gc git fsck 原文来自：GithubGist]]></content>
      <categories>
        <category>web基础</category>
      </categories>
      <tags>
        <tag>-git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo个人博客的搭建]]></title>
    <url>%2F2018%2F10%2F30%2Fhexo-set%2F</url>
    <content type="text"><![CDATA[Hexo的搭建 &emsp;&emsp;在很早之前我就想搭建一个自己的博客，以前看过一些博客搭建的博文之类的。有些博客的搭建方式很复杂，当然也是对于我这样的小白而言。之后慢慢接触到github，也是因为开发需要和方便快捷的项目备份。前两天看到github上面搭建博客一个非常方便的方式GitHub Pages搭建博客。 &emsp;&emsp;于是乎，本人就在网上查阅资料看到一个很方便快捷的方案，git+hexo+node.js搭建博客。而且hexo在官网提供了很多的主题可以供自己选择，这些主题模板不止有博客的还有展示模板和相册模板。几天前看到一个比较炫酷的博客若晓的博客,这篇博文的主人若晓就是使用这种方案搭建的。 环境准备 node.js git VScode+Markdown插件环境准备之前你应该取github官网注册一个账号。 后续跟新……]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>-git -hexo -个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[md语法]]></title>
    <url>%2F2018%2F10%2F30%2Fmarkdown_pro%2F</url>
    <content type="text"><![CDATA[标题语法# 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 一级标题 =================== 二级标题 -------------------- 强调Markdown 使用星号（）和底线（_）作为标记强调字词的符号，被 或 包围的字词会被转成用 &lt;em&gt;标签包围，用两个* 或 包起来的话，则会被转成 &lt;strong&gt;, 例如： 一个强调字符, 即斜体, 可用 asterisks 或 underscores. 两个强调字符, 即粗体, 可用 **asterisks** 或 __underscores__. 也可以组合使用, 可用 **asterisks and _underscores_**. 而想展现删除线, 可用两条波浪线. ~~Scratch this.~~ 区块要在 Markdown 中建立代码区块很简单，有两种方法： 第一种，只要简单地缩进 4 个空格或是 1 个制表符就可以. 第二种，在代码段落的头部和尾部用包围起来（更建议用这种方式）。 图片一个惊叹号『!』 接着一个方括号，里面是图片的替代文字 接着一个普通括号，里面是图片的网址，最后还可以用引号包住并加上 选择性的『title’』文字。 行内式(外链)的图片语法看起来像是： ![Alt text](/path/to/img.jpg) 或 ![Alt text](/path/to/img.jpg &quot;Optional title&quot;) 详细叙述如下： 1.一个惊叹号 ! 2.接着一个方括号，里面放上图片的替代文字 3.接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。到目前为止，Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的标签。 表格示例| Tables | Are | Cool | | ------------- |:-------------:| -----:| | col 3 is | right-aligned | $1600 | | col 2 is | centered | $12 | | zebra stripes | are neat | $1 | 第一行为定义表格头部标题，而第二行是区分头部和设置对齐方式, 减号(-)至少有3个. 表格外围的管道的可选的, 也不需要让每行的每个TD的管道对齐. 最简单的写法也可以像下面那样，但是看代码就没上面的那么好看了，尽管最后的显示效果都一样. 在减号的两侧定义冒号&quot;:&quot; 可设置该竖行的对齐方式, 左边加等于左对齐，两边都加等于居中对齐. Markdown | Less | Pretty --- | --- | --- *Still* | `renders` | **nicely** 1 | 2 | 3 Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 Markdown Less Pretty Still renders nicely 1 2 3 自动链接梦舞银雪的博客 [梦舞银雪的博客](http://setloser.github.io) 分割线这是分隔线上部分内容 --- 这是分隔线下部分内容 流程图Markdown 编辑器已支持绘制流程图、时序图和甘特图。通过 mermaid 实现图形的插入，点击查看语法详情。 列表- Red - Green - Blue Red Green Blue 参考来自：CODIN Markdown 语法介绍首次博文,不足之处多多包涵]]></content>
      <categories>
        <category>web基础</category>
      </categories>
      <tags>
        <tag>-语法</tag>
      </tags>
  </entry>
</search>
